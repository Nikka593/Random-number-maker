<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>カスタマイズ可能な Random 数字 Maker | オンラインで簡単に数字を生成</title>
    <meta name="description" content="Ito ゲームやその他のゲーム用のカスタマイズ可能な数字ジェネレーター。参加人数、数字範囲、発表方法を自由に設定できます。">
    <meta name="keywords" content="Ito, ゲーム, ランダム数字, 数字ジェネレーター, カスタム範囲, パーティーゲーム">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react/17.0.2/umd/react.production.min.js" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-dom/17.0.2/umd/react-dom.production.min.js" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/react-router-dom/5.2.0/react-router-dom.min.js" crossorigin="anonymous"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f0f0f0;
            color: #333;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            background-color: #fff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
        }
        h1, h2 {
            color: #2c3e50;
            text-align: center;
        }
        button {
            background-color: #3498db;
            color: white;
            padding: 12px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #2980b9;
        }
        .input-group {
            margin-bottom: 20px;
        }
        .input-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: bold;
        }
        .input-group input, .input-group select {
            width: 100%;
            padding: 10px;
            border-radius: 5px;
            border: 1px solid #bdc3c7;
            font-size: 16px;
        }
        .result-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(120px, 1fr));
            gap: 15px;
            margin-top: 30px;
        }
        .result-item {
            background-color: #ecf0f1;
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            transition: transform 0.3s;
        }
        .result-item:hover {
            transform: translateY(-5px);
        }
        .icon {
            display: inline-block;
            margin-right: 10px;
            vertical-align: middle;
        }
    </style>
</head>
<body>
    <div id="app"></div>

    <script>
        const { useState } = React;
        const { BrowserRouter, Route, Switch, useHistory } = ReactRouterDOM;

        // SVGアイコンコンポーネント
        const DiceIcon = () => (
            React.createElement('svg', { width: '24', height: '24', viewBox: '0 0 24 24', className: 'icon' },
                React.createElement('path', { fill: 'currentColor', d: 'M5 3h14a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2zm2 2a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm10 10a2 2 0 1 0 0 4 2 2 0 0 0 0-4zm-5-5a2 2 0 1 0 0 4 2 2 0 0 0 0-4z' })
            )
        );

        const UserIcon = () => (
            React.createElement('svg', { width: '24', height: '24', viewBox: '0 0 24 24', className: 'icon' },
                React.createElement('path', { fill: 'currentColor', d: 'M12 2a5 5 0 1 0 5 5 5 5 0 0 0-5-5zm0 8a3 3 0 1 1 3-3 3 3 0 0 1-3 3zm9 11v-1a7 7 0 0 0-7-7h-4a7 7 0 0 0-7 7v1h2v-1a5 5 0 0 1 5-5h4a5 5 0 0 1 5 5v1z' })
            )
        );

        function Setup() {
            const [mode, setMode] = useState('ito');
            const [participants, setParticipants] = useState(2);
            const [range, setRange] = useState({ min: 1, max: 100 });
            const [customRange, setCustomRange] = useState('');
            const [presentationMode, setPresentationMode] = useState('individual');
            const history = useHistory();

            const handleSetupSubmit = (e) => {
                e.preventDefault();
                const config = {
                    mode,
                    participants,
                    range,
                    customRange,
                    presentationMode
                };
                history.push('/results', { config });
            };

            return React.createElement('div', { className: "container" },
                React.createElement('h1', null, 
                    React.createElement(DiceIcon),
                    "Random 数字 Maker"
                ),
                React.createElement('form', { onSubmit: handleSetupSubmit },
                    React.createElement('div', { className: "input-group" },
                        React.createElement('label', null, "ゲームモード:"),
                        React.createElement('select', { value: mode, onChange: (e) => setMode(e.target.value) },
                            React.createElement('option', { value: "ito" }, "Ito ゲーム"),
                            React.createElement('option', { value: "custom" }, "カスタム範囲")
                        )
                    ),
                    React.createElement('div', { className: "input-group" },
                        React.createElement('label', null, 
                            React.createElement(UserIcon),
                            "参加人数:"
                        ),
                        React.createElement('input', { type: "number", value: participants, onChange: (e) => setParticipants(parseInt(e.target.value)), min: "1", required: true })
                    ),
                    mode === 'custom' ?
                        React.createElement('div', { className: "input-group" },
                            React.createElement('label', null, "カスタム範囲 (カンマ区切り):"),
                            React.createElement('input', { type: "text", value: customRange, onChange: (e) => setCustomRange(e.target.value), placeholder: "例: A,B,C,D または 1,2,3,4,5", required: true })
                        ) :
                        React.createElement(React.Fragment, null,
                            React.createElement('div', { className: "input-group" },
                                React.createElement('label', null, "最小値:"),
                                React.createElement('input', { type: "number", value: range.min, onChange: (e) => setRange(prev => ({ ...prev, min: parseInt(e.target.value) })), required: true })
                            ),
                            React.createElement('div', { className: "input-group" },
                                React.createElement('label', null, "最大値:"),
                                React.createElement('input', { type: "number", value: range.max, onChange: (e) => setRange(prev => ({ ...prev, max: parseInt(e.target.value) })), required: true })
                            )
                        ),
                    React.createElement('div', { className: "input-group" },
                        React.createElement('label', null, "発表方法:"),
                        React.createElement('select', { value: presentationMode, onChange: (e) => setPresentationMode(e.target.value) },
                            React.createElement('option', { value: "individual" }, "1人ずつ発表"),
                            React.createElement('option', { value: "all" }, "全員一気に発表")
                        )
                    ),
                    React.createElement('button', { type: "submit" }, "生成開始")
                )
            );
        }

        function Results() {
            const history = useHistory();
            const config = history.location.state?.config;
            const [results, setResults] = useState([]);

            React.useEffect(() => {
                if (!config) {
                    history.replace('/');
                    return;
                }

                let newResults;
                if (config.mode === 'custom') {
                    const customValues = config.customRange.split(',').map(v => v.trim());
                    newResults = Array.from({length: config.participants}, () => ({
                        value: customValues[Math.floor(Math.random() * customValues.length)],
                        revealed: config.presentationMode === 'all'
                    }));
                } else {
                    newResults = Array.from({length: config.participants}, () => ({
                        value: Math.floor(Math.random() * (config.range.max - config.range.min + 1)) + config.range.min,
                        revealed: config.presentationMode === 'all'
                    }));
                }
                setResults(newResults);
            }, []);

            const handleReveal = (index) => {
                setResults(prev => prev.map((r, i) => i === index ? {...r, revealed: true} : r));
            };

            return React.createElement('div', { className: "container" },
                React.createElement('h2', null, "結果"),
                React.createElement('div', { className: "result-grid" },
                    results.map((result, index) => 
                        React.createElement('div', { key: index, className: "result-item" },
                            React.createElement('p', null, 
                                React.createElement(UserIcon),
                                `参加者 ${index + 1}`
                            ),
                            result.revealed ?
                                React.createElement('p', null, result.value) :
                                React.createElement('button', { onClick: () => handleReveal(index) }, "表示")
                        )
                    )
                ),
                React.createElement('button', { onClick: () => history.push('/') }, "新しいゲームを開始")
            );
        }

        function App() {
            return React.createElement(BrowserRouter, null,
                React.createElement(Switch, null,
                    React.createElement(Route, { exact: true, path: "/", component: Setup }),
                    React.createElement(Route, { path: "/results", component: Results })
                )
            );
        }

        ReactDOM.render(React.createElement(App), document.getElementById('app'));
    </script>
</body>
</html>
